{"paragraphs":[{"text":"%md\n# Assignment 3 – Data Exploration using Spark2 and Cassandra  \n**Course:** STQD6324 – Data Management  \n**Semester:** 2, 2024/2025  \n**Student:** Adam Suhail Bin Shahril  \n**Dataset:** MovieLens 100k ([Link](https://grouplens.org/datasets/movielens/))\n\n","user":"anonymous","dateUpdated":"2025-06-20T21:16:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750453539565_2081281880","id":"20250620-210539_461456207","dateCreated":"2025-06-20T21:05:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2676","dateFinished":"2025-06-20T21:16:12+0000","dateStarted":"2025-06-20T21:16:12+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h1>Assignment 3 – Data Exploration using Spark2 and Cassandra</h1>\n<p><strong>Course:</strong> STQD6324 – Data Management\n<br  /><strong>Semester:</strong> 2, 2024/2025\n<br  /><strong>Student:</strong> Adam Suhail Bin Shahril\n<br  /><strong>Dataset:</strong> MovieLens 100k (<a href=\"https://grouplens.org/datasets/movielens/\">Link</a>)</p>\n"}]}},{"text":"%md\n\n## Step 1: Download MovieLens Dataset  \nWe download the following files from the MovieLens 100k dataset:\n- `u.user` — User demographic data  \n- `u.data` — Ratings data  \n- `u.item` — Movie information  \n\nThese files are saved to the `/tmp/` directory on the local file system.\n\n","user":"anonymous","dateUpdated":"2025-06-20T21:07:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750453602530_941178944","id":"20250620-210642_1634202538","dateCreated":"2025-06-20T21:06:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2760","dateFinished":"2025-06-20T21:07:18+0000","dateStarted":"2025-06-20T21:07:18+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Step 1: Download MovieLens Dataset</h2>\n<p>We download the following files from the MovieLens 100k dataset:</p>\n<ul>\n<li><code>u.user</code> — User demographic data</li>\n<li><code>u.data</code> — Ratings data</li>\n<li><code>u.item</code> — Movie information</li>\n</ul>\n<p>These files are saved to the <code>/tmp/</code> directory on the local file system.</p>\n"}]}},{"text":"%sh\r\n\r\nwget http://media.sundog-soft.com/hadoop/ml-100k/u.user -O /tmp/u.user\r\nwget http://media.sundog-soft.com/hadoop/ml-100k/u.data -O /tmp/u.data\r\nwget http://media.sundog-soft.com/hadoop/ml-100k/u.item -O /tmp/u.item\r\n","user":"anonymous","dateUpdated":"2025-06-20T20:53:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"--2025-06-20 20:53:56--  http://media.sundog-soft.com/hadoop/ml-100k/u.user\nResolving media.sundog-soft.com (media.sundog-soft.com)... 52.217.94.124, 16.182.70.209, 16.182.42.145, ...\nConnecting to media.sundog-soft.com (media.sundog-soft.com)|52.217.94.124|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 22628 (22K) [text/plain]\nSaving to: ‘/tmp/u.user\\r’\n\n     0K .......... .......... ..                              100% 90.1K=0.2s\n\n2025-06-20 20:53:57 (90.1 KB/s) - ‘/tmp/u.user\\r’ saved [22628/22628]\n\n--2025-06-20 20:53:57--  http://media.sundog-soft.com/hadoop/ml-100k/u.data\nResolving media.sundog-soft.com (media.sundog-soft.com)... 3.5.28.177, 3.5.22.6, 54.231.139.97, ...\nConnecting to media.sundog-soft.com (media.sundog-soft.com)|3.5.28.177|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 2079229 (2.0M) [application/octet-stream]\nSaving to: ‘/tmp/u.data\\r’\n\n     0K .......... .......... .......... .......... ..........  2%  106K 19s\n    50K .......... .......... .......... .......... ..........  4%  200K 14s\n   100K .......... .......... .......... .......... ..........  7% 30.2M 9s\n   150K .......... .......... .......... .......... ..........  9% 2.16M 7s\n   200K .......... .......... .......... .......... .......... 12%  236K 7s\n   250K .......... .......... .......... .......... .......... 14% 23.6M 6s\n   300K .......... .......... .......... .......... .......... 17%  214K 6s\n   350K .......... .......... .......... .......... .......... 19% 32.3M 5s\n   400K .......... .......... .......... .......... .......... 22% 18.6M 4s\n   450K .......... .......... .......... .......... .......... 24% 29.8M 4s\n   500K .......... .......... .......... .......... .......... 27% 22.2M 3s\n   550K .......... .......... .......... .......... .......... 29%  216K 3s\n   600K .......... .......... .......... .......... .......... 32% 19.1M 3s\n   650K .......... .......... .......... .......... .......... 34% 24.2M 3s\n   700K .......... .......... .......... .......... .......... 36% 28.9M 2s\n   750K .......... .......... .......... .......... .......... 39% 23.8M 2s\n   800K .......... .......... .......... .......... .......... 41% 20.5M 2s\n   850K .......... .......... .......... .......... .......... 44% 24.6M 2s\n   900K .......... .......... .......... .......... .......... 46% 23.3M 2s\n   950K .......... .......... .......... .......... .......... 49% 52.5M 1s\n  1000K .......... .......... .......... .......... .......... 51% 34.7M 1s\n  1050K .......... .......... .......... .......... .......... 54% 19.0M 1s\n  1100K .......... .......... .......... .......... .......... 56%  228K 1s\n  1150K .......... .......... .......... .......... .......... 59% 27.2M 1s\n  1200K .......... .......... .......... .......... .......... 61% 20.2M 1s\n  1250K .......... .......... .......... .......... .......... 64% 18.6M 1s\n  1300K .......... .......... .......... .......... .......... 66% 29.1M 1s\n  1350K .......... .......... .......... .......... .......... 68% 22.6M 1s\n  1400K .......... .......... .......... .......... .......... 71% 28.3M 1s\n  1450K .......... .......... .......... .......... .......... 73% 43.8M 1s\n  1500K .......... .......... .......... .......... .......... 76% 60.4M 1s\n  1550K .......... .......... .......... .......... .......... 78% 20.4M 0s\n  1600K .......... .......... .......... .......... .......... 81% 24.2M 0s\n  1650K .......... .......... .......... .......... .......... 83% 30.2M 0s\n  1700K .......... .......... .......... .......... .......... 86% 32.3M 0s\n  1750K .......... .......... .......... .......... .......... 88% 25.2M 0s\n  1800K .......... .......... .......... .......... .......... 91% 57.7M 0s\n  1850K .......... .......... .......... .......... .......... 93% 28.2M 0s\n  1900K .......... .......... .......... .......... .......... 96% 29.6M 0s\n  1950K .......... .......... .......... .......... .......... 98% 38.1M 0s\n  2000K .......... .......... ..........                      100% 84.2M=1.7s\n\n2025-06-20 20:53:59 (1.17 MB/s) - ‘/tmp/u.data\\r’ saved [2079229/2079229]\n\n--2025-06-20 20:53:59--  http://media.sundog-soft.com/hadoop/ml-100k/u.item\nResolving media.sundog-soft.com (media.sundog-soft.com)... 52.217.94.124, 16.182.70.209, 16.182.42.145, ...\nConnecting to media.sundog-soft.com (media.sundog-soft.com)|52.217.94.124|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 236344 (231K) [application/octet-stream]\nSaving to: ‘/tmp/u.item’\n\n     0K .......... .......... .......... .......... .......... 21%  101K 2s\n    50K .......... .......... .......... .......... .......... 43% 2.54M 1s\n   100K .......... .......... .......... .......... .......... 64%  209K 0s\n   150K .......... .......... .......... .......... .......... 86% 4.40M 0s\n   200K .......... .......... ..........                      100%  122K=1.0s\n\n2025-06-20 20:54:01 (227 KB/s) - ‘/tmp/u.item’ saved [236344/236344]\n\n"}]},"apps":[],"jobName":"paragraph_1750447018611_-988465658","id":"20250620-191658_561847652","dateCreated":"2025-06-20T19:16:58+0000","dateStarted":"2025-06-20T20:53:55+0000","dateFinished":"2025-06-20T20:54:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2314"},{"text":"%md\r\n\r\n## Step 2: Upload Dataset to HDFS  \r\nWe now upload the downloaded files from the local `/tmp/` directory to the Hadoop Distributed File System (HDFS) under the path:  \r\n`/user/maria_dev/adam_suhail/assignment3/`\r\n\r\nThis allows Spark to access the data in a distributed fashion for processing.","user":"anonymous","dateUpdated":"2025-06-20T21:08:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750453673045_1534754552","id":"20250620-210753_910631155","dateCreated":"2025-06-20T21:07:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2903","dateFinished":"2025-06-20T21:08:03+0000","dateStarted":"2025-06-20T21:08:03+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>Step 2: Upload Dataset to HDFS</h2>\n<p>We now upload the downloaded files from the local <code>/tmp/</code> directory to the Hadoop Distributed File System (HDFS) under the path:\n<br  /><code>/user/maria_dev/adam_suhail/assignment3/</code></p>\n<p>This allows Spark to access the data in a distributed fashion for processing.</p>\n"}]}},{"text":"%sh\r\n\r\nhdfs dfs -mkdir -p /user/maria_dev/adam_suhail/assignment3\r\nhdfs dfs -put -f /tmp/u.user /user/maria_dev/adam_suhail/assignment3/\r\nhdfs dfs -put -f /tmp/u.data /user/maria_dev/adam_suhail/assignment3/\r\nhdfs dfs -put -f /tmp/u.item /user/maria_dev/adam_suhail/assignment3/\r\n","user":"anonymous","dateUpdated":"2025-06-20T20:54:03+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750450338507_-514524533","id":"20250620-201218_1469751868","dateCreated":"2025-06-20T20:12:18+0000","dateStarted":"2025-06-20T20:54:03+0000","dateFinished":"2025-06-20T20:54:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2315"},{"text":"%md\n## 🔧 Spark Session Initialization\n\nWe begin by importing necessary PySpark libraries and creating a `SparkSession`. This session is configured to connect to Cassandra running on `localhost` (127.0.0.1).\n","user":"anonymous","dateUpdated":"2025-06-20T21:21:50+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750454507345_-260140106","id":"20250620-212147_1348788368","dateCreated":"2025-06-20T21:21:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3393","dateFinished":"2025-06-20T21:21:50+0000","dateStarted":"2025-06-20T21:21:50+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>🔧 Spark Session Initialization</h2>\n<p>We begin by importing necessary PySpark libraries and creating a <code>SparkSession</code>. This session is configured to connect to Cassandra running on <code>localhost</code> (127.0.0.1).</p>\n"}]}},{"text":"%pyspark\r\n\r\nfrom pyspark.sql import SparkSession\r\nfrom pyspark.sql.types import *\r\nfrom pyspark.sql.functions import *\r\n\r\nspark = SparkSession.builder \\\r\n    .appName(\"MovieLensAssignment3\") \\\r\n    .config(\"spark.cassandra.connection.host\", \"127.0.0.1\") \\\r\n    .getOrCreate()","user":"anonymous","dateUpdated":"2025-06-20T21:08:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750450415071_-1240991753","id":"20250620-201335_1392067854","dateCreated":"2025-06-20T20:13:35+0000","dateStarted":"2025-06-20T20:54:16+0000","dateFinished":"2025-06-20T20:55:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2316"},{"text":"%md\r\n## 👥 Load `u.user` Data from HDFS\r\n\r\nWe define the schema for the `u.user` file and load it as a DataFrame from HDFS using a pipe `|` delimiter. This dataset contains demographic information about users.","user":"anonymous","dateUpdated":"2025-06-20T21:22:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750454529923_-1845274926","id":"20250620-212209_606669097","dateCreated":"2025-06-20T21:22:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3476","dateFinished":"2025-06-20T21:22:13+0000","dateStarted":"2025-06-20T21:22:13+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>👥 Load <code>u.user</code> Data from HDFS</h2>\n<p>We define the schema for the <code>u.user</code> file and load it as a DataFrame from HDFS using a pipe <code>|</code> delimiter. This dataset contains demographic information about users.</p>\n"}]}},{"text":"%pyspark\n\nuser_schema = StructType([\n    StructField(\"user_id\", IntegerType(), True),\n    StructField(\"age\", IntegerType(), True),\n    StructField(\"gender\", StringType(), True),\n    StructField(\"occupation\", StringType(), True),\n    StructField(\"zip_code\", StringType(), True)\n])\n\nuser_df = spark.read.option(\"delimiter\", \"|\").schema(user_schema) \\\n    .csv(\"hdfs:///user/maria_dev/adam_suhail/assignment3/u.user\")\n\nuser_df.show(5)\n","user":"anonymous","dateUpdated":"2025-06-20T20:55:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|      1| 24|     M|technician|   85711|\n|      2| 53|     F|     other|   94043|\n|      3| 23|     M|    writer|   32067|\n|      4| 24|     M|technician|   43537|\n|      5| 33|     F|     other|   15213|\n+-------+---+------+----------+--------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750450465212_1406742909","id":"20250620-201425_789718413","dateCreated":"2025-06-20T20:14:25+0000","dateStarted":"2025-06-20T20:55:42+0000","dateFinished":"2025-06-20T20:55:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2317"},{"text":"%md\n## ⭐ Load `u.data` Ratings Data\n\nNext, we load the movie ratings data from the `u.data` file. This file contains user ID, item (movie) ID, rating (on a scale of 1–5), and timestamp. The delimiter used is a tab (`\\t`).\n\n","user":"anonymous","dateUpdated":"2025-06-20T21:22:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750454565726_330141328","id":"20250620-212245_998202169","dateCreated":"2025-06-20T21:22:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3639","dateFinished":"2025-06-20T21:22:57+0000","dateStarted":"2025-06-20T21:22:57+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>⭐ Load <code>u.data</code> Ratings Data</h2>\n<p>Next, we load the movie ratings data from the <code>u.data</code> file. This file contains user ID, item (movie) ID, rating (on a scale of 1–5), and timestamp. The delimiter used is a tab (<code>\\t</code>).</p>\n"}]}},{"text":"%pyspark\nrating_schema = StructType([\n    StructField(\"user_id\", IntegerType(), True),\n    StructField(\"item_id\", IntegerType(), True),\n    StructField(\"rating\", IntegerType(), True),\n    StructField(\"timestamp\", LongType(), True)\n])\n\nrating_df = spark.read.option(\"delimiter\", \"\\t\").schema(rating_schema) \\\n    .csv(\"hdfs:///user/maria_dev/adam_suhail/assignment3/u.data\")\n\nrating_df.show(5)","user":"anonymous","dateUpdated":"2025-06-20T21:22:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+-------+------+---------+\n|user_id|item_id|rating|timestamp|\n+-------+-------+------+---------+\n|    196|    242|     3|881250949|\n|    186|    302|     3|891717742|\n|     22|    377|     1|878887116|\n|    244|     51|     2|880606923|\n|    166|    346|     1|886397596|\n+-------+-------+------+---------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750450483202_49748862","id":"20250620-201443_1568398316","dateCreated":"2025-06-20T20:14:43+0000","dateStarted":"2025-06-20T20:55:49+0000","dateFinished":"2025-06-20T20:55:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2318"},{"text":"%md\n## 🎬 Load `u.item` Movies Data\n\nWe now load the movie metadata from the `u.item` file. This dataset includes movie ID, title, release dates, IMDb URL, and a binary vector indicating genre membership across 19 genres. This rich genre data will help us answer complex queries such as identifying a user's favorite genre.\n\nThe file is pipe (`|`) delimited, and the schema is explicitly defined to include all genre columns.\n","user":"anonymous","dateUpdated":"2025-06-20T21:35:20+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750454594182_-2105841876","id":"20250620-212314_919301474","dateCreated":"2025-06-20T21:23:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3733","dateFinished":"2025-06-20T21:35:20+0000","dateStarted":"2025-06-20T21:35:20+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>🎬 Load <code>u.item</code> Movies Data</h2>\n<p>We now load the movie metadata from the <code>u.item</code> file. This dataset includes movie ID, title, release dates, IMDb URL, and a binary vector indicating genre membership across 19 genres. This rich genre data will help us answer complex queries such as identifying a user's favorite genre.</p>\n<p>The file is pipe (<code>|</code>) delimited, and the schema is explicitly defined to include all genre columns.</p>\n"}]}},{"text":"%pyspark\n\nfrom pyspark.sql.types import StructType, StructField, IntegerType, StringType\n\nmovie_schema = StructType([\n    StructField(\"movie_id\", IntegerType(), True),\n    StructField(\"title\", StringType(), True),\n    StructField(\"release_date\", StringType(), True),\n    StructField(\"video_release_date\", StringType(), True),\n    StructField(\"IMDb_URL\", StringType(), True),\n    StructField(\"unknown\", IntegerType(), True),\n    StructField(\"Action\", IntegerType(), True),\n    StructField(\"Adventure\", IntegerType(), True),\n    StructField(\"Animation\", IntegerType(), True),\n    StructField(\"Children's\", IntegerType(), True),\n    StructField(\"Comedy\", IntegerType(), True),\n    StructField(\"Crime\", IntegerType(), True),\n    StructField(\"Documentary\", IntegerType(), True),\n    StructField(\"Drama\", IntegerType(), True),\n    StructField(\"Fantasy\", IntegerType(), True),\n    StructField(\"Film-Noir\", IntegerType(), True),\n    StructField(\"Horror\", IntegerType(), True),\n    StructField(\"Musical\", IntegerType(), True),\n    StructField(\"Mystery\", IntegerType(), True),\n    StructField(\"Romance\", IntegerType(), True),\n    StructField(\"Sci-Fi\", IntegerType(), True),\n    StructField(\"Thriller\", IntegerType(), True),\n    StructField(\"War\", IntegerType(), True),\n    StructField(\"Western\", IntegerType(), True)\n])\n\nmovie_df = spark.read.option(\"delimiter\", \"|\") \\\n    .schema(movie_schema) \\\n    .csv(\"hdfs:///user/maria_dev/adam_suhail/assignment3/u.item\")\n\nmovie_df.createOrReplaceTempView(\"movies\")\n\nmovie_df.show(5, truncate=False)","user":"anonymous","dateUpdated":"2025-06-20T21:23:27+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-----------------+------------+------------------+------------------------------------------------------+-------+------+---------+---------+----------+------+-----+-----------+-----+-------+---------+------+-------+-------+-------+------+--------+---+-------+\n|movie_id|title            |release_date|video_release_date|IMDb_URL                                              |unknown|Action|Adventure|Animation|Children's|Comedy|Crime|Documentary|Drama|Fantasy|Film-Noir|Horror|Musical|Mystery|Romance|Sci-Fi|Thriller|War|Western|\n+--------+-----------------+------------+------------------+------------------------------------------------------+-------+------+---------+---------+----------+------+-----+-----------+-----+-------+---------+------+-------+-------+-------+------+--------+---+-------+\n|1       |Toy Story (1995) |01-Jan-1995 |null              |http://us.imdb.com/M/title-exact?Toy%20Story%20(1995) |0      |0     |0        |1        |1         |1     |0    |0          |0    |0      |0        |0     |0      |0      |0      |0     |0       |0  |0      |\n|2       |GoldenEye (1995) |01-Jan-1995 |null              |http://us.imdb.com/M/title-exact?GoldenEye%20(1995)   |0      |1     |1        |0        |0         |0     |0    |0          |0    |0      |0        |0     |0      |0      |0      |0     |1       |0  |0      |\n|3       |Four Rooms (1995)|01-Jan-1995 |null              |http://us.imdb.com/M/title-exact?Four%20Rooms%20(1995)|0      |0     |0        |0        |0         |0     |0    |0          |0    |0      |0        |0     |0      |0      |0      |0     |1       |0  |0      |\n|4       |Get Shorty (1995)|01-Jan-1995 |null              |http://us.imdb.com/M/title-exact?Get%20Shorty%20(1995)|0      |1     |0        |0        |0         |1     |0    |0          |1    |0      |0        |0     |0      |0      |0      |0     |0       |0  |0      |\n|5       |Copycat (1995)   |01-Jan-1995 |null              |http://us.imdb.com/M/title-exact?Copycat%20(1995)     |0      |0     |0        |0        |0         |0     |1    |0          |1    |0      |0        |0     |0      |0      |0      |0     |1       |0  |0      |\n+--------+-----------------+------------+------------------+------------------------------------------------------+-------+------+---------+---------+----------+------+-----+-----------+-----+-------+---------+------+-------+-------+-------+------+--------+---+-------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750450511463_-1767573435","id":"20250620-201511_226607317","dateCreated":"2025-06-20T20:15:11+0000","dateStarted":"2025-06-20T21:17:39+0000","dateFinished":"2025-06-20T21:17:40+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2319"},{"text":"%md\n## 🧠 Register Temp Views for SQL Queries\n\nTo enable SQL-based analysis using Spark SQL, we register the loaded DataFrames (`users`, `ratings`, and `movies`) as temporary views. This allows us to write and execute SQL queries directly on these views for ease of analysis throughout the assignment.\n","user":"anonymous","dateUpdated":"2025-06-20T21:24:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750454545530_456708392","id":"20250620-212225_528505662","dateCreated":"2025-06-20T21:22:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3564","dateFinished":"2025-06-20T21:24:24+0000","dateStarted":"2025-06-20T21:24:24+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>🧠 Register Temp Views for SQL Queries</h2>\n<p>To enable SQL-based analysis using Spark SQL, we register the loaded DataFrames (<code>users</code>, <code>ratings</code>, and <code>movies</code>) as temporary views. This allows us to write and execute SQL queries directly on these views for ease of analysis throughout the assignment.</p>\n"}]}},{"text":"%pyspark\nuser_df.createOrReplaceTempView(\"users\")\nrating_df.createOrReplaceTempView(\"ratings\")\nmovie_df.createOrReplaceTempView(\"movies\")","user":"anonymous","dateUpdated":"2025-06-20T21:17:51+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750450524893_188520622","id":"20250620-201524_221146379","dateCreated":"2025-06-20T20:15:24+0000","dateStarted":"2025-06-20T21:17:51+0000","dateFinished":"2025-06-20T21:17:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2320","focus":true},{"text":"%md\r\n### 🗃️ Step: Create Tables in Cassandra (`cqlsh`)\r\n\r\nBefore persisting any data into Cassandra using Spark, we manually created the required tables in the `movielens` keyspace using the `cqlsh` shell (via PuTTY or terminal). Below are the exact CQL commands used:\r\n\r\n```sql\r\n-- Create keyspace\r\nCREATE KEYSPACE IF NOT EXISTS movielens\r\nWITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\r\n\r\n-- Create users table\r\nCREATE TABLE IF NOT EXISTS movielens.users (\r\n    user_id int PRIMARY KEY,\r\n    age int,\r\n    gender text,\r\n    occupation text,\r\n    zip_code text\r\n);\r\n\r\n-- Create ratings table\r\nCREATE TABLE IF NOT EXISTS movielens.ratings (\r\n    user_id int,\r\n    item_id int,\r\n    rating int,\r\n    timestamp bigint,\r\n    PRIMARY KEY (user_id, item_id)\r\n);\r\n\r\n-- Create movies table\r\nCREATE TABLE IF NOT EXISTS movielens.movies (\r\n    movie_id int PRIMARY KEY,\r\n    title text,\r\n    release_date text,\r\n    video_release_date text,\r\n    IMDb_URL text,\r\n    unknown int,\r\n    Action int,\r\n    Adventure int,\r\n    Animation int,\r\n    \"Children's\" int,\r\n    Comedy int,\r\n    Crime int,\r\n    Documentary int,\r\n    Drama int,\r\n    Fantasy int,\r\n    \"Film-Noir\" int,\r\n    Horror int,\r\n    Musical int,\r\n    Mystery int,\r\n    Romance int,\r\n    \"Sci-Fi\" int,\r\n    Thriller int,\r\n    War int,\r\n    Western int\r\n);\r\n","user":"anonymous","dateUpdated":"2025-06-20T21:29:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750454962470_103539550","id":"20250620-212922_563496777","dateCreated":"2025-06-20T21:29:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4079","dateFinished":"2025-06-20T21:29:33+0000","dateStarted":"2025-06-20T21:29:33+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>🗃️ Step: Create Tables in Cassandra (<code>cqlsh</code>)</h3>\n<p>Before persisting any data into Cassandra using Spark, we manually created the required tables in the <code>movielens</code> keyspace using the <code>cqlsh</code> shell (via PuTTY or terminal). Below are the exact CQL commands used:</p>\n<pre><code class=\"sql\">-- Create keyspace\nCREATE KEYSPACE IF NOT EXISTS movielens\nWITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\n\n-- Create users table\nCREATE TABLE IF NOT EXISTS movielens.users (\n    user_id int PRIMARY KEY,\n    age int,\n    gender text,\n    occupation text,\n    zip_code text\n);\n\n-- Create ratings table\nCREATE TABLE IF NOT EXISTS movielens.ratings (\n    user_id int,\n    item_id int,\n    rating int,\n    timestamp bigint,\n    PRIMARY KEY (user_id, item_id)\n);\n\n-- Create movies table\nCREATE TABLE IF NOT EXISTS movielens.movies (\n    movie_id int PRIMARY KEY,\n    title text,\n    release_date text,\n    video_release_date text,\n    IMDb_URL text,\n    unknown int,\n    Action int,\n    Adventure int,\n    Animation int,\n    \"Children's\" int,\n    Comedy int,\n    Crime int,\n    Documentary int,\n    Drama int,\n    Fantasy int,\n    \"Film-Noir\" int,\n    Horror int,\n    Musical int,\n    Mystery int,\n    Romance int,\n    \"Sci-Fi\" int,\n    Thriller int,\n    War int,\n    Western int\n);\n</code></pre>\n"}]}},{"text":"%md\n### Saving `users` DataFrame to Cassandra\n\nIn this step, we persist the `users` DataFrame into the `movielens` keyspace in Cassandra. This allows us to perform scalable, distributed queries using Cassandra's storage backend.\n\nBefore executing the code, ensure that the following CQL command has been executed in `cqlsh` on your Cassandra instance to create the `users` table:\n\n```sql\nCREATE KEYSPACE IF NOT EXISTS movielens\nWITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\n\nCREATE TABLE IF NOT EXISTS movielens.users (\n    user_id int PRIMARY KEY,\n    age int,\n    gender text,\n    occupation text,\n    zip_code text\n);\n\n","user":"anonymous","dateUpdated":"2025-06-20T21:30:41+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750454814523_-1337777447","id":"20250620-212654_1167392912","dateCreated":"2025-06-20T21:26:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3925","dateFinished":"2025-06-20T21:30:41+0000","dateStarted":"2025-06-20T21:30:41+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Saving <code>users</code> DataFrame to Cassandra</h3>\n<p>In this step, we persist the <code>users</code> DataFrame into the <code>movielens</code> keyspace in Cassandra. This allows us to perform scalable, distributed queries using Cassandra's storage backend.</p>\n<p>Before executing the code, ensure that the following CQL command has been executed in <code>cqlsh</code> on your Cassandra instance to create the <code>users</code> table:</p>\n<pre><code class=\"sql\">CREATE KEYSPACE IF NOT EXISTS movielens\nWITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};\n\nCREATE TABLE IF NOT EXISTS movielens.users (\n    user_id int PRIMARY KEY,\n    age int,\n    gender text,\n    occupation text,\n    zip_code text\n);\n</code></pre>\n"}]}},{"text":"%pyspark\r\n\r\nuser_df.write \\\r\n    .format(\"org.apache.spark.sql.cassandra\") \\\r\n    .mode(\"append\") \\\r\n    .option(\"keyspace\", \"movielens\") \\\r\n    .option(\"table\", \"users\") \\\r\n    .save()","user":"anonymous","dateUpdated":"2025-06-20T21:17:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1750450578895_1249901630","id":"20250620-201618_1993166961","dateCreated":"2025-06-20T20:16:18+0000","dateStarted":"2025-06-20T21:17:55+0000","dateFinished":"2025-06-20T21:17:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2321"},{"text":"%md\r\n## ✅ Question 1: Calculate the average rating for each movie","user":"anonymous","dateUpdated":"2025-06-20T21:39:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750455525235_2069790843","id":"20250620-213845_674476149","dateCreated":"2025-06-20T21:38:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4247","dateFinished":"2025-06-20T21:39:11+0000","dateStarted":"2025-06-20T21:39:11+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>✅ Question 1: Calculate the average rating for each movie</h2>\n"}]}},{"text":"%pyspark\r\n\r\nspark.sql(\"\"\"\r\nSELECT m.movie_id, m.title, ROUND(AVG(r.rating), 2) AS avg_rating\r\nFROM ratings r\r\nJOIN movies m ON r.item_id = m.movie_id\r\nGROUP BY m.movie_id, m.title\r\nORDER BY m.movie_id\r\nLIMIT 20\r\n\"\"\").show(truncate=False)","user":"anonymous","dateUpdated":"2025-06-20T21:17:58+0000","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":310.833,"optionOpen":false}}},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+----------------------------------------------------+----------+\n|movie_id|title                                               |avg_rating|\n+--------+----------------------------------------------------+----------+\n|1       |Toy Story (1995)                                    |3.88      |\n|2       |GoldenEye (1995)                                    |3.21      |\n|3       |Four Rooms (1995)                                   |3.03      |\n|4       |Get Shorty (1995)                                   |3.55      |\n|5       |Copycat (1995)                                      |3.3       |\n|6       |Shanghai Triad (Yao a yao yao dao waipo qiao) (1995)|3.58      |\n|7       |Twelve Monkeys (1995)                               |3.8       |\n|8       |Babe (1995)                                         |4.0       |\n|9       |Dead Man Walking (1995)                             |3.9       |\n|10      |Richard III (1995)                                  |3.83      |\n|11      |Seven (Se7en) (1995)                                |3.85      |\n|12      |Usual Suspects, The (1995)                          |4.39      |\n|13      |Mighty Aphrodite (1995)                             |3.42      |\n|14      |Postino, Il (1994)                                  |3.97      |\n|15      |Mr. Holland's Opus (1995)                           |3.78      |\n|16      |French Twist (Gazon maudit) (1995)                  |3.21      |\n|17      |From Dusk Till Dawn (1996)                          |3.12      |\n|18      |White Balloon, The (1995)                           |2.8       |\n|19      |Antonia's Line (1995)                               |3.96      |\n|20      |Angels and Insects (1995)                           |3.42      |\n+--------+----------------------------------------------------+----------+\n\n"}]},"apps":[],"jobName":"paragraph_1750450758196_-1520797793","id":"20250620-201918_391139691","dateCreated":"2025-06-20T20:19:18+0000","dateStarted":"2025-06-20T21:17:58+0000","dateFinished":"2025-06-20T21:18:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2322"},{"text":"%md\n\n## ✅ Question 2: Identify the top ten movies with the highest average ratings\n","user":"anonymous","dateUpdated":"2025-06-20T21:39:40+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750455562332_-2058367285","id":"20250620-213922_341016843","dateCreated":"2025-06-20T21:39:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4322","dateFinished":"2025-06-20T21:39:40+0000","dateStarted":"2025-06-20T21:39:40+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>✅ Question 2: Identify the top ten movies with the highest average ratings</h2>\n"}]}},{"text":"%pyspark\n\nspark.sql(\"\"\"\nSELECT m.title, ROUND(AVG(r.rating), 2) AS avg_rating\nFROM ratings r\nJOIN movies m ON r.item_id = m.movie_id\nGROUP BY m.title\nORDER BY avg_rating DESC\nLIMIT 10\n\"\"\").show(truncate=False)\n","user":"anonymous","dateUpdated":"2025-06-20T21:18:08+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------------------------------------+----------+\n|title                                            |avg_rating|\n+-------------------------------------------------+----------+\n|Someone Else's America (1995)                    |5.0       |\n|Saint of Fort Washington, The (1993)             |5.0       |\n|Marlene Dietrich: Shadow and Light (1996)        |5.0       |\n|Aiqing wansui (1994)                             |5.0       |\n|Star Kid (1997)                                  |5.0       |\n|Great Day in Harlem, A (1994)                    |5.0       |\n|Entertaining Angels: The Dorothy Day Story (1996)|5.0       |\n|They Made Me a Criminal (1939)                   |5.0       |\n|Santa with Muscles (1996)                        |5.0       |\n|Prefontaine (1997)                               |5.0       |\n+-------------------------------------------------+----------+\n\n"}]},"apps":[],"jobName":"paragraph_1750453035122_-344864774","id":"20250620-205715_2027199190","dateCreated":"2025-06-20T20:57:15+0000","dateStarted":"2025-06-20T21:18:08+0000","dateFinished":"2025-06-20T21:18:11+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2323"},{"text":"%md\n## ✅ Question 3: Find the users who have rated at least 50 movies and identify their favourite movie genres\n","user":"anonymous","dateUpdated":"2025-06-20T21:39:57+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750455591258_1038922657","id":"20250620-213951_389782291","dateCreated":"2025-06-20T21:39:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4408","dateFinished":"2025-06-20T21:39:57+0000","dateStarted":"2025-06-20T21:39:57+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>✅ Question 3: Find the users who have rated at least 50 movies and identify their favourite movie genres</h2>\n"}]}},{"text":"%pyspark\r\n\r\nspark.sql(\"\"\"\r\nWITH active_users AS (\r\n    SELECT user_id FROM ratings GROUP BY user_id HAVING COUNT(*) >= 50\r\n),\r\nuser_top_rated AS (\r\n    SELECT r.user_id, m.*, r.rating,\r\n           ROW_NUMBER() OVER (PARTITION BY r.user_id ORDER BY r.rating DESC) as rank\r\n    FROM ratings r\r\n    JOIN movies m ON r.item_id = m.movie_id\r\n    WHERE r.user_id IN (SELECT user_id FROM active_users)\r\n),\r\ntop_movies AS (\r\n    SELECT * FROM user_top_rated WHERE rank = 1\r\n),\r\nuser_fav_genre AS (\r\n    SELECT user_id,\r\n           CASE\r\n               WHEN Action = 1 THEN 'Action'\r\n               WHEN Adventure = 1 THEN 'Adventure'\r\n               WHEN Animation = 1 THEN 'Animation'\r\n               WHEN `Children's` = 1 THEN 'Children'\r\n               WHEN Comedy = 1 THEN 'Comedy'\r\n               WHEN Crime = 1 THEN 'Crime'\r\n               WHEN Documentary = 1 THEN 'Documentary'\r\n               WHEN Drama = 1 THEN 'Drama'\r\n               WHEN Fantasy = 1 THEN 'Fantasy'\r\n               WHEN `Film-Noir` = 1 THEN 'Film-Noir'\r\n               WHEN Horror = 1 THEN 'Horror'\r\n               WHEN Musical = 1 THEN 'Musical'\r\n               WHEN Mystery = 1 THEN 'Mystery'\r\n               WHEN Romance = 1 THEN 'Romance'\r\n               WHEN `Sci-Fi` = 1 THEN 'Sci-Fi'\r\n               WHEN Thriller = 1 THEN 'Thriller'\r\n               WHEN War = 1 THEN 'War'\r\n               WHEN Western = 1 THEN 'Western'\r\n               ELSE 'Unknown'\r\n           END AS favourite_genre,\r\n           title\r\n    FROM top_movies\r\n)\r\nSELECT user_id, title AS favourite_movie, favourite_genre\r\nFROM user_fav_genre\r\nLIMIT 10\r\n\"\"\").show(truncate=False)\r\n\r\n","user":"anonymous","dateUpdated":"2025-06-20T21:19:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---------------------------------------------+---------------+\n|user_id|favourite_movie                              |favourite_genre|\n+-------+---------------------------------------------+---------------+\n|148    |Close Shave, A (1995)                        |Animation      |\n|463    |Godfather, The (1972)                        |Action         |\n|496    |Immortal Beloved (1994)                      |Drama          |\n|833    |Boogie Nights (1997)                         |Drama          |\n|243    |Breaking the Waves (1996)                    |Drama          |\n|392    |12 Angry Men (1957)                          |Drama          |\n|540    |Fargo (1996)                                 |Crime          |\n|897    |Toy Story (1995)                             |Animation      |\n|85     |Godfather: Part II, The (1974)               |Action         |\n|251    |Romy and Michele's High School Reunion (1997)|Comedy         |\n+-------+---------------------------------------------+---------------+\n\n"}]},"apps":[],"jobName":"paragraph_1750453232443_-1942667304","id":"20250620-210032_939890676","dateCreated":"2025-06-20T21:00:32+0000","dateStarted":"2025-06-20T21:19:24+0000","dateFinished":"2025-06-20T21:19:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2324"},{"text":"%md\n## ✅ Question 4: Find all the users who are less than 20 years old\n","user":"anonymous","dateUpdated":"2025-06-20T21:40:11+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750455603950_-803255076","id":"20250620-214003_1788822136","dateCreated":"2025-06-20T21:40:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4494","dateFinished":"2025-06-20T21:40:11+0000","dateStarted":"2025-06-20T21:40:11+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>✅ Question 4: Find all the users who are less than 20 years old</h2>\n"}]}},{"text":"%pyspark\n\nspark.sql(\"SELECT * FROM users WHERE age < 20\").show()\n","user":"anonymous","dateUpdated":"2025-06-20T21:02:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+-------------+--------+\n|user_id|age|gender|   occupation|zip_code|\n+-------+---+------+-------------+--------+\n|     30|  7|     M|      student|   55436|\n|     36| 19|     F|      student|   93117|\n|     52| 18|     F|      student|   55105|\n|     57| 16|     M|         none|   84010|\n|     67| 17|     M|      student|   60402|\n|     68| 19|     M|      student|   22904|\n|    101| 15|     M|      student|   05146|\n|    110| 19|     M|      student|   77840|\n|    142| 13|     M|        other|   48118|\n|    179| 15|     M|entertainment|   20755|\n|    206| 14|     F|      student|   53115|\n|    221| 19|     M|      student|   20685|\n|    223| 19|     F|      student|   47906|\n|    246| 19|     M|      student|   28734|\n|    257| 17|     M|      student|   77005|\n|    258| 19|     F|      student|   77801|\n|    262| 19|     F|      student|   78264|\n|    270| 18|     F|      student|   63119|\n|    281| 15|     F|      student|   06059|\n|    289| 11|     M|         none|   94619|\n+-------+---+------+-------------+--------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1750453277084_200646225","id":"20250620-210117_688694862","dateCreated":"2025-06-20T21:01:17+0000","dateStarted":"2025-06-20T21:02:10+0000","dateFinished":"2025-06-20T21:02:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2325"},{"text":"%md\n## ✅ Question 5: Find all the users whose occupation is “scientist” and whose age is between 30 and 40 years old\n","user":"anonymous","dateUpdated":"2025-06-20T21:40:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750455621085_291971800","id":"20250620-214021_212010937","dateCreated":"2025-06-20T21:40:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4581","dateFinished":"2025-06-20T21:40:26+0000","dateStarted":"2025-06-20T21:40:26+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>✅ Question 5: Find all the users whose occupation is “scientist” and whose age is between 30 and 40 years old</h2>\n"}]}},{"text":"%pyspark\n\nspark.sql(\"\"\"\nSELECT * FROM users\nWHERE occupation = 'scientist'\nAND age BETWEEN 30 AND 40\n\"\"\").show()\n","user":"anonymous","dateUpdated":"2025-06-20T21:02:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---+------+----------+--------+\n|user_id|age|gender|occupation|zip_code|\n+-------+---+------+----------+--------+\n|     40| 38|     M| scientist|   27514|\n|     71| 39|     M| scientist|   98034|\n|     74| 39|     M| scientist|   T8H1N|\n|    107| 39|     M| scientist|   60466|\n|    183| 33|     M| scientist|   27708|\n|    272| 33|     M| scientist|   53706|\n|    309| 40|     M| scientist|   70802|\n|    337| 37|     M| scientist|   10522|\n|    430| 38|     M| scientist|   98199|\n|    538| 31|     M| scientist|   21010|\n|    543| 33|     M| scientist|   95123|\n|    554| 32|     M| scientist|   62901|\n|    643| 39|     M| scientist|   55122|\n|    730| 31|     F| scientist|   32114|\n|    874| 36|     M| scientist|   37076|\n|    918| 40|     M| scientist|   70116|\n+-------+---+------+----------+--------+\n\n"}]},"apps":[],"jobName":"paragraph_1750453329570_1739919305","id":"20250620-210209_427592811","dateCreated":"2025-06-20T21:02:09+0000","dateStarted":"2025-06-20T21:02:36+0000","dateFinished":"2025-06-20T21:02:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2326"},{"text":"%md\r\n## 🙏 Thank You\r\n\r\nThank you for reviewing this MovieLens assignment.  \r\nThis notebook demonstrates how to use Apache Spark and Cassandra for large-scale movie data analysis using PySpark and SQL.  \r\nFeel free to explore further queries and insights!\r\n\r\n— End of Assignment —\r\n","user":"anonymous","dateUpdated":"2025-06-20T21:40:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1750453346581_-833635439","id":"20250620-210226_172382005","dateCreated":"2025-06-20T21:02:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2327","dateFinished":"2025-06-20T21:40:54+0000","dateStarted":"2025-06-20T21:40:54+0000","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h2>🙏 Thank You</h2>\n<p>Thank you for reviewing this MovieLens assignment.\n<br  />This notebook demonstrates how to use Apache Spark and Cassandra for large-scale movie data analysis using PySpark and SQL.\n<br  />Feel free to explore further queries and insights!</p>\n<p>— End of Assignment —</p>\n"}]}}],"name":"P153109_Assignment3_DataManagement","id":"2M15AG4CD","angularObjects":{"2CHS8UYQQ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}